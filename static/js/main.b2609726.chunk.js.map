{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Component","constructor","props","super","handleTypingDone","this","setState","hideCursor","componentWillMount","checkIfPlainTypeEnabled","checkIfGradientTypeEnabled","appClass","bgStyle","prepareGradientStyleSheets","checkIfImageTypeEnabled","prepareBackgroundImageStyle","checkIfNightModeEnabled","state","backgroundType","checkIfDayModeEnabled","Configs","gradientColors","background","backgroundSize","backgroundImageUrl","getDefaultModeBasedOnBackgroundType","lightBackgroundModes","darkBackgroundModes","changeThemeMode","e","backgroundIndex","backgroundMode","changeBackgroundBasedonMode","plainBackgroundMode","devIntro","devDesc","icons","render","containerClass","React","createElement","className","style","onClick","concat","Typist","onTypingDone","map","icon","key","url","target","rel","href","image","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b2609726.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport './App.css';\nimport Configs from './configurations.json';\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darkBackgroundModes: [\n        'day',\n        'terminal',\n        'torquoise',\n        'alizarin',\n        'amythyst',\n        'carrot',\n        'peterriver'\n      ],\n      lightBackgroundModes: [\n        'night',\n        'lightred',\n        'lightpurple',\n        'lightgreen',\n        'lightblue',\n        'lightyellow'\n      ],\n      backgroundType: Configs.backgroundType || 'plain',\n      appClass: Configs.plainBackgroundMode || 'daylight',\n      devIntro: Configs.devIntro || 'Lorem Ipsum',\n      devDesc:\n        Configs.devDesc ||\n        'Aute veniam ut deserunt cillum irure pariatur Lorem dolore anim nostrud quis veniam elit culpa.',\n      backgroundMode: 'default',\n      backgroundIndex: 0,\n      bgStyle: {},\n      icons: Configs.icons || [],\n      hideCursor: false\n    };\n  }\n\n  handleTypingDone = () => {\n    this.setState({ hideCursor: true });\n  };\n\n  componentWillMount = () => {\n    if (this.checkIfPlainTypeEnabled()) {\n      return true;\n    } else if (this.checkIfGradientTypeEnabled()) {\n      this.setState({\n        appClass: 'gradient',\n        bgStyle: this.prepareGradientStyleSheets()\n      });\n    } else if (this.checkIfImageTypeEnabled()) {\n      this.setState({\n        appClass: 'full-bg-image',\n        bgStyle: this.prepareBackgroundImageStyle()\n      });\n    }\n  };\n\n  checkIfNightModeEnabled = () => {\n    return (\n      this.state.backgroundType === 'plain' &&\n      this.state.appClass === 'nightlight'\n    );\n  };\n\n  checkIfDayModeEnabled = () => {\n    return (\n      this.state.backgroundType === 'plain' &&\n      this.state.appClass === 'daylight'\n    );\n  };\n\n  checkIfGradientTypeEnabled = () => {\n    return this.state.backgroundType === 'gradient';\n  };\n\n  checkIfPlainTypeEnabled = () => {\n    return this.state.backgroundType === 'plain';\n  };\n\n  checkIfImageTypeEnabled = () => {\n    return this.state.backgroundType === 'image';\n  };\n\n  prepareGradientStyleSheets = () => {\n    if (Configs.gradientColors) {\n      return {\n        background: 'linear-gradient(-45deg, ' + Configs.gradientColors + ')',\n        backgroundSize: '400% 400%'\n      };\n    } else {\n      return {\n        background:\n          'linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB)',\n        backgroundSize: '400% 400%'\n      };\n    }\n  };\n\n  prepareBackgroundImageStyle = () => {\n    if (Configs.backgroundImageUrl) {\n      return {\n        background:\n          'url(\"' +\n          Configs.backgroundImageUrl +\n          '\") no-repeat center center fixed',\n        backgroundSize: 'cover'\n      };\n    } else {\n      return {\n        background:\n          'url(\"/images/sample-background.jpg\") no-repeat center center fixed',\n        backgroundSize: 'cover'\n      };\n    }\n  };\n\n  getDefaultModeBasedOnBackgroundType = () => {\n    if (this.checkIfNightModeEnabled()) {\n      return this.state.lightBackgroundModes[0];\n    } else if (this.checkIfDayModeEnabled()) {\n      return this.state.darkBackgroundModes[0];\n    }\n  };\n\n  changeThemeMode = e => {\n    if (this.checkIfNightModeEnabled()) {\n      this.setState({\n        appClass: 'daylight',\n        backgroundIndex: 0,\n        backgroundMode: this.state.darkBackgroundModes[0]\n      });\n    } else if (this.checkIfDayModeEnabled()) {\n      this.setState({\n        appClass: 'nightlight',\n        backgroundIndex: 0,\n        backgroundMode: this.state.lightBackgroundModes[0]\n      });\n    }\n  };\n\n  changeBackgroundBasedonMode = () => {\n    // if (\n    //   this.checkIfNightModeEnabled() &&\n    //   this.state.backgroundIndex < this.state.lightBackgroundModes.length - 1\n    // ) {\n    //   this.setState({\n    //     backgroundIndex: this.state.backgroundIndex + 1,\n    //     backgroundMode: this.state.lightBackgroundModes[\n    //       this.state.backgroundIndex + 1\n    //     ]\n    //   });\n    // } else if (\n    //   this.checkIfDayModeEnabled() &&\n    //   this.state.backgroundIndex < this.state.darkBackgroundModes.length - 1\n    // ) {\n    //   this.setState({\n    //     backgroundIndex: this.state.backgroundIndex + 1,\n    //     backgroundMode: this.state.darkBackgroundModes[\n    //       this.state.backgroundIndex + 1\n    //     ]\n    //   });\n    // } else {\n    //   this.setState({\n    //     backgroundIndex: 0,\n    //     backgroundMode: this.getDefaultModeBasedOnBackgroundType()\n    //   });\n    // }\n  };\n\n  render() {\n    const {\n      appClass, bgStyle, backgroundMode, devIntro, devDesc, icons, hideCursor\n    } = this.state;\n    const containerClass = hideCursor ? 'hide-typist-cursor' : '';\n\n    return (\n      <div className={ appClass } style={ bgStyle }>\n        {/* <div className=\"change-mode\" onClick={this.changeThemeMode} /> */}\n        <div\n          className={ backgroundMode }\n          onClick={this.changeBackgroundBasedonMode}>\n          <main className=\"App-main\">\n            <h1 className=\"intro arvo-regular\">{ devIntro }</h1>\n            <div className={`tagline ${containerClass}`}>\n              <Typist onTypingDone={this.handleTypingDone}>\n                {devDesc}\n              </Typist>\n            </div>\n            <div className=\"icons-social\">\n              {icons.map((icon) => (\n                <a\n                  key={icon.url} // Assuming icon.url is unique\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={icon.url}\n                >\n                  <i className={icon.image} />\n                </a>\n              ))}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}